USE MASTER
GO

CREATE DATABASE DB_HIGH_SCHOOL
GO

USE DB_HIGH_SCHOOL
GO

	------------------------------------------
	--CREATING THE PROFILES TABLE
	------------------------------------------
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PROFILES') )
	BEGIN
		CREATE TABLE PROFILES
		(
			ID_PROFILE UNIQUEIDENTIFIER  DEFAULT(NEWID()),
			PROFILE_NAME VARCHAR(40)NOT NULL,
			EMAIL VARCHAR(20)UNIQUE NOT NULL,
			BIRTHDAY DATETIME NOT NULL,
			IDENTIFICATION_CARD VARCHAR(20)UNIQUE NOT NULL,
			PHONE_NUMBER VARCHAR(15)NOT NULL,
			ABOUT_ME NVARCHAR(MAX),
			REGISTERED_AT DATETIME DEFAULT(GETUTCDATE()),
			PROFILE_TYPE INT NOT NULL,
			ID_USER UNIQUEIDENTIFIER NOT NULL,
			PRIMARY KEY(ID_PROFILE)
		)
	END;

	
	------------------------------------------
	--CREATING THE USERS TABLE
	------------------------------------------
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'USERS'))
	BEGIN
		CREATE TABLE USERS
		(
			ID_USER UNIQUEIDENTIFIER DEFAULT(NEWID()),
			USERNAME NVARCHAR(100)UNIQUE NOT NULL,
			PASSWORD NVARCHAR(500)NOT NULL,
			PRIMARY KEY(ID_USER)
		)
	END;


	------------------------------------------
	--CREATING THE PROFILE_TYPE TABLE
	------------------------------------------
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PROFILE_TYPE'))
	BEGIN
		CREATE TABLE PROFILE_TYPE
		(
			ID_PROFILE_TYPE INT IDENTITY(1,1),
			PROFILE_TYPE VARCHAR(20)NOT NULL CHECK(PROFILE_TYPE IN('STUDENT','PROFESSOR')),
		)
	END;
	ALTER TABLE PROFILE_TYPE ADD CONSTRAINT ID_PROFILE_TYPE_PROFILE_TYPE PRIMARY KEY(ID_PROFILE_TYPE)

	------------------------------------------
	--CREATING THE COURSE TABLE
	------------------------------------------
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'COURSE'))
	BEGIN
		CREATE TABLE COURSE
		(	
			ID_COURSE UNIQUEIDENTIFIER DEFAULT(NEWID()),
			COURSE_NAME VARCHAR(80)NOT NULL,
			CODE VARCHAR(10)UNIQUE NOT NULL,
			COST INT NOT NULL,
			CREDITS  INT NOT NULL,
			PRIMARY KEY(ID_COURSE)
		)
	END;


	------------------------------------------
	--CREATING THE OPEN_COURSE TABLE
	------------------------------------------
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'OPEN_COURSE'))
	BEGIN
		CREATE TABLE OPEN_COURSE
		(
			ID_OPEN_COURSE INT IDENTITY(1,1),
			ID_COURSE UNIQUEIDENTIFIER NOT NULL,
			ID_PROFESSOR UNIQUEIDENTIFIER NOT NULL,
			COURSE_TIME TIME NOT NULL,
			PRIMARY KEY(ID_OPEN_COURSE)
		)
	END;


	------------------------------------------
	--CREATING THE OPEN_COURSE_DAY TABLE
	------------------------------------------
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'OPEN_COURSE_DAY'))
	BEGIN
		CREATE TABLE OPEN_COURSE_DAY
		(
			ID_OPEN_COURSE_DAY INT IDENTITY(1,1),
			ID_OPEN_COURSE INT NOT NULL,
			COURSE_DAY VARCHAR(9) NOT NULL,
			PRIMARY KEY(ID_OPEN_COURSE_DAY)
		)
	END;


	------------------------------------------
	--CREATING THE OPEN_COURSE_BY_STUDENT TABLE
	------------------------------------------
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'OPEN_COURSE_BY_STUDENT'))
	BEGIN
		CREATE TABLE OPEN_COURSE_BY_STUDENT
		(
			ID INT IDENTITY(1,1),
			ID_OPEN_COURSE INT NOT NULL,
			ID_STUDENT UNIQUEIDENTIFIER NOT NULL,
			PRIMARY KEY(ID)
		)
	END;


	--ADDING FOREIGN KEYS IN THE PROFILE TABLE
ALTER TABLE PROFILES ADD CONSTRAINT ID_USER_PROFILES FOREIGN KEY(ID_USER) REFERENCES USERS(ID_USER) ON UPDATE CASCADE
ALTER TABLE PROFILES ADD CONSTRAINT PROFILE_TYPE_PROFILES FOREIGN KEY(PROFILE_TYPE) REFERENCES PROFILE_TYPE(ID_PROFILE_TYPE) ON UPDATE CASCADE

	--ADDING FOREIGN KEYS IN THE OPEN_COURSE TABLE
ALTER TABLE OPEN_COURSE ADD CONSTRAINT ID_COURSE_OPEN_COURSE FOREIGN KEY(ID_COURSE) REFERENCES COURSE(ID_COURSE) ON UPDATE CASCADE
ALTER TABLE OPEN_COURSE ADD CONSTRAINT ID_PROFESSOR_OPEN_COURSE FOREIGN KEY(ID_PROFESSOR) REFERENCES PROFILES(ID_PROFILE) ON UPDATE CASCADE

	--ADDING FOREIGN KEYS IN THE OPEN_COURSE_BY_STUDENT TABLE
ALTER TABLE OPEN_COURSE_BY_STUDENT ADD CONSTRAINT ID_OPEN_COURSE_OPEN_COURSE_BY_STUDENT  FOREIGN KEY(ID_OPEN_COURSE) REFERENCES OPEN_COURSE(ID_OPEN_COURSE) ON UPDATE CASCADE
ALTER TABLE OPEN_COURSE_BY_STUDENT ADD CONSTRAINT ID_STUDENT_OPEN_COURSE_BY_STUDENT  FOREIGN KEY(ID_STUDENT) REFERENCES PROFILES(ID_PROFILE)

	--ADDING FOREIGN KEYS IN THE OPEN_COURSE_DAY TABLE
ALTER TABLE OPEN_COURSE_DAY ADD CONSTRAINT ID_OPEN_COURSE_OPEN_COURSE_DAY FOREIGN KEY(ID_OPEN_COURSE) REFERENCES OPEN_COURSE(ID_OPEN_COURSE) ON UPDATE CASCADE




-------STORED PROCEDURES

--------------------------------------------
-- STORED PROCEDURE__CREATING PROFILE TYPE
--------------------------------------------
CREATE PROCEDURE CRE_USER
	
	@USERNAME AS NVARCHAR(100),
	@PASSWORD AS NVARCHAR(500)

AS
	SET NOCOUNT ON;

	INSERT INTO USERS VALUES(NEWID(),@USERNAME,@PASSWORD)

GO


--------------------------------------------
-- STORED PROCEDURE__CREATE COURSE
--------------------------------------------
CREATE PROCEDURE CRE_COURSE
	
	@COURSE_NAME AS VARCHAR(80),
	@CODE AS VARCHAR(10),
	@COST AS INT,
	@CREDITS AS INT

AS
	SET NOCOUNT ON;

	INSERT INTO COURSE VALUES(NEWID(),@COURSE_NAME,@CODE,@COST,@CREDITS)

GO


--------------------------------------------
-- STORED PROCEDURE__CREATE OPEN COURSE
--------------------------------------------
CREATE PROCEDURE CRE_OPEN_COURSE
	
	@ID_COURSE AS UNIQUEIDENTIFIER,
	@ID_PROFESSOR AS UNIQUEIDENTIFIER,
	@COURSE_TIME AS TIME

AS
	SET NOCOUNT ON;

	INSERT INTO OPEN_COURSE VALUES(@ID_COURSE,@ID_PROFESSOR,@COURSE_TIME)

GO


--------------------------------------------
-- STORED PROCEDURE__CREATE OPEN COURSE FOR STUDENTS
--------------------------------------------
CREATE PROCEDURE CRE_OPEN_COURSE_BY_STUDENT
	
	@ID_OPEN_COURSE INT,
	@ID_STUDENT UNIQUEIDENTIFIER

AS
	SET NOCOUNT ON;

	INSERT INTO OPEN_COURSE_BY_STUDENT VALUES(@ID_OPEN_COURSE,@ID_STUDENT)

GO

--------------------------------------------
-- STORED PROCEDURE__CREATE OPEN COURSE DAY
--------------------------------------------
CREATE PROCEDURE CRE_OPEN_COURSE_DAY

	@ID_OPEN_COURSE AS INT,
	@COURSE_DAY AS VARCHAR(9)

AS
	SET NOCOUNT ON;

	INSERT INTO OPEN_COURSE_DAY VALUES(@ID_OPEN_COURSE,@COURSE_DAY)

GO



--------------------------------------------
-- STORED PROCEDURE__CREATING PROFILE TYPE
--------------------------------------------
CREATE PROCEDURE CRE_PROFILE_TYPE
	
	@TYPE AS VARCHAR(20)

AS
	SET NOCOUNT ON;

	INSERT INTO PROFILE_TYPE VALUES(@TYPE)

GO

--------------------------------------------
-- STORED PROCEDURE__CREATING PROFILE
--------------------------------------------
CREATE PROCEDURE CRE_PROFILE

		@PROFILE_NAME AS VARCHAR(40),
		@EMAIL AS VARCHAR(20),
		@BIRTHDAY AS DATETIME,
		@IDENTIFICATION_CARD AS VARCHAR(20),
		@PHONE_NUMBER AS VARCHAR(15),
		@ABOUT_ME AS NVARCHAR(MAX),
		@PROFILE_TYPE AS INT,
		@ID_USER AS UNIQUEIDENTIFIER

AS
	SET NOCOUNT ON;

	INSERT INTO PROFILES VALUES(
		NEWID(),
		@PROFILE_NAME,
		@EMAIL,
		@BIRTHDAY,
		@IDENTIFICATION_CARD,
		@PHONE_NUMBER,
		@ABOUT_ME,
		GETUTCDATE(),
		@PROFILE_TYPE,
		@ID_USER
	)
GO

--------------------------------------------
-- STORED PROCEDURE__UPDATE PROFILE
--------------------------------------------
CREATE PROCEDURE UPD_PROFILE

		@ID_PROFILE UNIQUEIDENTIFIER,
		@PROFILE_NAME AS VARCHAR(40),
		@EMAIL AS VARCHAR(20),
		@BIRTHDAY AS DATETIME,
		@IDENTIFICATION_CARD AS VARCHAR(20),
		@PHONE_NUMBER AS VARCHAR(15),
		@ABOUT_ME AS NVARCHAR(MAX),
		@PROFILE_TYPE AS INT
AS
	SET NOCOUNT ON;

	UPDATE PROFILES
	SET PROFILE_NAME = @PROFILE_NAME,
		EMAIL = @EMAIL,
		BIRTHDAY = @BIRTHDAY,
		IDENTIFICATION_CARD = @IDENTIFICATION_CARD,
		PHONE_NUMBER = @PHONE_NUMBER,
		ABOUT_ME = @ABOUT_ME,
		PROFILE_TYPE = @PROFILE_TYPE

	WHERE @ID_PROFILE = ID_PROFILE

GO

--------------------------------------------
-- STORED PROCEDURE__RETRIVE PROFILES
--------------------------------------------
CREATE PROCEDURE RET_PROFILE


AS
	SET NOCOUNT ON;

		SELECT ID_PROFILE,PROFILE_NAME,EMAIL,BIRTHDAY,IDENTIFICATION_CARD,PHONE_NUMBER,ABOUT_ME,REGISTERED_AT,PROTYPE.PROFILE_TYPE,ID_USER
	FROM PROFILES
	INNER JOIN PROFILE_TYPE AS PROTYPE ON
	PROTYPE.ID_PROFILE_TYPE = PROFILES.PROFILE_TYPE

GO


--------------------------------------------
-- STORED PROCEDURE__RETRIVE USERS
--------------------------------------------
CREATE PROCEDURE RET_USER


AS
	SET NOCOUNT ON;

	SELECT * FROM USERS

GO


--------------------------------------------
-- STORED PROCEDURE__RETRIVE USER BY CREADENTIALS
--------------------------------------------
CREATE PROCEDURE RET_USER_BY_CREDENTIALS
	
	@PASSWORD AS NVARCHAR(500),
	@USERNAME AS NVARCHAR(100)

AS
	SET NOCOUNT ON;

	SELECT *
	FROM USERS
	WHERE USERS.PASSWORD = @PASSWORD AND USERS.USERNAME = @USERNAME

GO


--------------------------------------------
-- STORED PROCEDURE__RETRIVE USER BY USERNAME
--------------------------------------------
CREATE PROCEDURE RET_USER_BY_USERNAME
	
	@USERNAME AS NVARCHAR(100)

AS
	SET NOCOUNT ON;

	SELECT * 
	FROM USERS
	WHERE USERS.USERNAME = @USERNAME

GO


--------------------------------------------
-- STORED PROCEDURE__RETRIVE PROFILE_BY_ID
--------------------------------------------
CREATE PROCEDURE RET_PROFILE_BY_ID

	@ID_PROFILE AS UNIQUEIDENTIFIER
AS
	SET NOCOUNT ON;

	SELECT ID_PROFILE,PROFILE_NAME,EMAIL,BIRTHDAY,IDENTIFICATION_CARD,PHONE_NUMBER,ABOUT_ME,REGISTERED_AT,PROTYPE.PROFILE_TYPE,ID_USER
	FROM PROFILES
	INNER JOIN PROFILE_TYPE AS PROTYPE ON
	PROTYPE.ID_PROFILE_TYPE = PROFILES.PROFILE_TYPE

	WHERE ID_PROFILE = @ID_PROFILE

GO


-----------------------------------------------
-- STORED PROCEDURE__RETRIVE PROFILE_BY_ID_USER
-----------------------------------------------
CREATE PROCEDURE RET_PROFILE_BY_ID_USER

	@ID_USER AS UNIQUEIDENTIFIER
AS
	SET NOCOUNT ON;

	SELECT ID_PROFILE,PROFILE_NAME,EMAIL,BIRTHDAY,IDENTIFICATION_CARD,PHONE_NUMBER,ABOUT_ME,REGISTERED_AT,PROTYPE.PROFILE_TYPE,ID_USER
	FROM PROFILES
	INNER JOIN PROFILE_TYPE AS PROTYPE ON
	PROTYPE.ID_PROFILE_TYPE = PROFILES.PROFILE_TYPE
	WHERE ID_USER = @ID_USER

GO

-----------------------------------------------
-- STORED PROCEDURE__RETRIVE COURSES
-----------------------------------------------
CREATE PROCEDURE RET_COURSES

AS
	SET NOCOUNT ON;

	SELECT * FROM COURSE

GO


-----------------------------------------------
-- STORED PROCEDURE__RETRIVE COURSES
-----------------------------------------------
CREATE PROCEDURE RET_ALL_USERS

AS
	SET NOCOUNT ON;

	SELECT * FROM USERS

GO


EXEC  CRE_PROFILE_TYPE 'STUDENT'
EXEC  CRE_PROFILE_TYPE 'PROFESSOR'

EXEC CRE_USER 'adrian6@live.com','Va6A'
EXEC CRE_USER 'ADRIAN_VEGA','Va6A'
EXEC CRE_USER 'carlos1234@gmail.com','carlos123'
EXEC CRE_USER 'juanProfessor','juanProfessor123'
EXEC CRE_USER 'danilo1234@gmail.com','Danilo123'
EXEC CRE_USER 'jose1234@gmail.com','Jose1234'

EXEC CRE_PROFILE 'Adrian','adrian10596@live.com','1896-10-10','11640260','70496014','I am a student of software enginner',1,'CF81A244-32CF-4A0C-9C52-188DAFA783A3'
EXEC CRE_PROFILE 'Antonio','vegaadrian10596@gmail.com','1996-05-10','12345678910','70496014','I am a cooking student',1,'209E02D1-E4E0-4009-B4D3-7C3D948168FC'
EXEC CRE_PROFILE 'Carlos','carlos123@live.com','1968-05-05','89024962321','62917490','I am a cooking Professor',2,'FE2CD4E1-B971-42C8-9043-4884EBC3D156'
EXEC CRE_PROFILE 'Juan','juan123@gmail.com','1970-10-10','792072983412','79892386','I am a software Professor',2,'27AB3708-D7CE-4BDB-AED2-1316FB464419'

EXEC CRE_COURSE 'Design Pattern','091-DP',120000,4
EXEC CRE_COURSE 'The first steps for dessert','0911-CDES',120000,4

EXEC CRE_OPEN_COURSE 'E18F1DDD-29C3-4BB6-A682-1916D4F7DABE','3F5A920D-5FB2-4DBE-8D65-66CA181C1F78','18:00:00'
EXEC CRE_OPEN_COURSE '8C3C54EB-514A-4828-BC30-B813E466A379','55DB8277-1DC2-41DA-9B92-B8D5EF7FD196','13:00:00'

EXEC CRE_OPEN_COURSE_DAY 4,'MONDAY'
EXEC CRE_OPEN_COURSE_DAY 4,'FRIDAY'

EXEC CRE_OPEN_COURSE_DAY 5,'SATURDAY'
EXEC CRE_OPEN_COURSE_DAY 5,'SUNDAY'

EXEC CRE_OPEN_COURSE_BY_STUDENT 4,'D749CA45-1317-49D7-8E91-1E363205E021'
EXEC CRE_OPEN_COURSE_BY_STUDENT 4,'D9E39685-D106-4A94-A2F9-759F634402C2'
EXEC CRE_OPEN_COURSE_BY_STUDENT 5,'D749CA45-1317-49D7-8E91-1E363205E021'

EXEC RET_PROFILE_BY_ID 'D749CA45-1317-49D7-8E91-1E363205E021'
EXEC RET_PROFILE

EXEC RET_USER_BY_CREDENTIALS 'Vega10596A','adrian10596@live.com'

EXEC RET_USER_BY_USERNAME 'adrian10596@live.com'

EXEC RET_ALL_USERS

SELECT * FROM USERS
SELECT * FROM PROFILES
SELECT * FROM PROFILE_TYPE
SELECT * FROM COURSE
SELECT * FROM OPEN_COURSE